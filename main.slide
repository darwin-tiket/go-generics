Generics in Go

Darwin
tiket.com

* Why Generics?
- *Code* *Reusability*, write functions and data structures that work with any type, reducing duplication.
- *Type* *Safety*, ensure type correctness at compile time without resorting to `interface{}` and type assertions.
- *Improved* *Performance*, avoid runtime type checks and conversions common with empty interfaces.
- *Cleaner* *APIs*, create more expressive and readable APIs by clearly specifying type constraints.
- *Maintainability*, reduce boilerplate and make code easier to understand and maintain.

* Why not just using empty interface{} type instead?
- *Error-prone*, prone to human-error due to lack of type safety.
- *Verbosity*, increases verbosity due to excessive use of type assertions.
- *Runtime* *Errors*, type errors can only be detected at runtime.
- *Runtime* *Overhead*, incurs runtime overhead due to reflection.

* The Anatomy
- *Type* *Parameter*, declared with `[T` `any]`, where `T` is a placeholder type and `any` allows any concrete type (e.g. `func` `Foo[T` `any]()` `{}`).
- *Type* *Constraint*, used to restrict type parameter via interfaces or unions (e.g., `int` `|` `float64`).
- *Type* *Approximation*, when a type parameter is prefixed with a tilde `~`, it infers the closest matching type set based on method sets or structural types (e.g. `~int` `|` `~float64`).
- *Type* *Inference*, let compiler automatically infer the type parameters from arguments without needing to explicitly specify them.

* In a nutshell...
Declaration
.image generic1.png 180 200
Instantiation
.image generic2.png 150 200

* How are generics implemented in Go?
- The compiler can choose whether to compile each instantiation separately (_monomorphization_) or whether to compile similar instantiations as a single implementation (_polymorphism_).
- The single implementation approach is similar to a function with an interface parameter.
- The compiler retains the reflection information of generic type in runtime.

* When do we use generics?
- Functions that work on slices, maps, channels, and etc of any element type.
- Functions that look identical or same for all types.
- General purpose or container-type data structures (e.g. generic stack or queue).

* When don't we use generics?
- When just use for calling a method in a type constraint.
.code generic_not_useful.go /START OMIT/,/END OMIT/
- When the implementation of a function is different for each type.

* Example with non-generic code
.code non-generics.go /START OMIT/,/END OMIT/
If we need a function that accepts `int32`, `int64`, and `float32`, then we will need to implement 3 functions with same logic again.

* Or with interface{}
.code interface.go /START OMIT/,/END OMIT/

* Example with generic code
.code generics.go /START OMIT/,/END OMIT/
We now have a single generic function which accepts multiple types that is constrainted by `Integer` interface.

* The type constraints are basically interfaces
.code generic_sugar.go /START OMIT/,/END OMIT/
Equals to
.code generic_sugar1.go /START OMIT/,/END OMIT/

So you can write
.code generic_sugar2.go /START OMIT/,/END OMIT/
Or
.code generic_sugar3.go /START OMIT/,/END OMIT/

* Real World Examples No. 1
For example, we want to create a function to get order ids from orders list.

.code generictest.go /START OMIT/,/END OMIT/

We can see there are identical logic patterns as we need to implement this logic for different type. So, how to generalize it?

* Solutions No. 1
.code generic_real_world.go /START OMIT/,/END OMIT/
Generalize the type to accept a type parameter. And we can use it simply
.code generic_map.go /START OMIT/,/END OMIT/

*

We can also use `SliceMap` to map a slice to another different type of slice.

For example:
.code generic_map2.go /START OMIT/,/END OMIT/

* Examples No. 2
Suppose we have a function to check the existence order type of list of order types and a function to check whether the status code is whitelisted
.code nongeneric_find.go /START OMIT/,/END OMIT/

As we see here these two functions are identical. How can we combine this into a single generic function that can serve multiple use cases?

* Solutions No. 2
We implement the generic function named `SliceAny` which checks whether the expected item exists in the list of items regardless of the data type.
.code generic_find.go /START OMIT/,/END OMIT/
We use `comparable` type constraint which provided default by Go when we want to perform equality check (e.g. ==, !=) between generic types.

* Examples No. 3
Suppose we want to return a HTTP API response in our service. And we have
.code nongeneric_response.go /START OMIT/,/END OMIT/
If we want to return a pay order HTTP API response, then we have to create another separate object.

* Solutions No. 3
.code generic_response.go /START OMIT/,/END OMIT/
Now we have a single generic HTTP API response that can serve multiple object types.

We can now use it simply as
.code generic_response2.go /START OMIT/,/END OMIT/

* Examples No. 4
Suppose we have a function to get orders data asynchronously.
.code nongeneric_channel.go /START OMIT/,/END OMIT/
What if we just want a single function that can process arbitrary tasks asynchronously regardless only find orders?

* Solutions No. 4
.code generic_channel.go /START OMIT/,/END OMIT/
Now we can use this function for every tasks that process asynchronously.

* Generics Standard Libraries in Go
With Go 1.24, there are several new official packages that make use of generics

*constraints*: providing type constraints.

- `constraints.Integer`
- `constraints.Float`

*maps*: providing generic map functions.

- `maps.Keys`
- `maps.Values`

*slices*, providing generic slice functions.

- `slices.Sort`
- `slices.BinarySearch`

* Advantages of Generics
- Providing compile-time type checking with type constraints and reducing runtime errors.
- If using correctly, generics provide better runtime performance than using empty `interface{}` due to (partial) _monomorphization_.

* Disadvantages of Generics
- As of now, generics are not supported for struct methods. 
.link https://github.com/golang/go/issues/49085
- If using incorrectly, generics 
- With some _monomorphization_ implemented in Go generics, it will affect compilation time and binary size produced.
- Type constraint in Go is not that expressive and powerful compare to other languages.
- The standard library that implements generics is still limited and not perfect.
- Generics can actually make your code slower if wrongly use.
.link https://planetscale.com/blog/generics-can-make-your-go-code-slower

* References

.link https://go.dev/doc/faq#Type_Parameters
.link https://go.googlesource.com/proposal/+/master/design/15292/2013-12-type-params.md
.link https://github.com/akutz/go-generics-the-hard-way
.link https://planetscale.com/blog/generics-can-make-your-go-code-slower
.link https://go.googlesource.com/proposal/+/refs/heads/master/design/generics-implementation-stenciling.md
.link https://go.googlesource.com/proposal/+/refs/heads/master/design/generics-implementation-gcshape.md
.link https://go.googlesource.com/proposal/+/refs/heads/master/design/generics-implementation-dictionaries.md